
import json
from utils import send_message, get_role, get_user_link

def save_json(filename, data):
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def load_json(filename):
    try:
        with open(filename, "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return {}

def handle_command(user_id, text):
    args = text.strip().split()
    cmd = args[0].lower()
    role = get_role(user_id)

    if cmd == "/help":
        send_message(user_id, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
            "/id\n/mynick\n/setnick <–Ω–∏–∫>\n/nicks\n" +
            ("/mute <@user>\n/clear <N>\n" if role >= 1 else "") +
            ("/ban <@user> <–ø—Ä–∏—á–∏–Ω–∞>\n/unban <@user>\n/setrole <@user> <0|1|2>\n/roles" if role >= 2 else "")
        )

    elif cmd == "/id":
        send_message(user_id, f"–¢–≤–æ—è —Å—Å—ã–ª–∫–∞: {get_user_link(user_id)}")

    elif cmd == "/setnick" and len(args) > 1:
        nicks = load_json("nicks.json")
        nicks[str(user_id)] = " ".join(args[1:])
        save_json("nicks.json", nicks)
        send_message(user_id, "–ù–∏–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")

    elif cmd == "/mynick":
        nicks = load_json("nicks.json")
        nick = nicks.get(str(user_id), "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        send_message(user_id, f"–¢–≤–æ–π –Ω–∏–∫: {nick}")

    elif cmd == "/nicks":
        nicks = load_json("nicks.json")
        if nicks:
            msg = "\n".join([f"{k}: {v}" for k, v in nicks.items()])
            send_message(user_id, msg)
        else:
            send_message(user_id, "–ù–∏–∫–æ–≤ –Ω–µ—Ç.")

    elif cmd == "/mute" and role >= 1:
        send_message(user_id, "‚õî –ú—É—Ç –≤—ã–¥–∞–Ω (—Ñ–µ–π–∫, –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º—É—Ç —á–µ—Ä–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π).")

    elif cmd == "/clear" and role >= 1 and len(args) > 1:
        send_message(user_id, f"üßπ –û—á–∏—â–µ–Ω–æ {args[1]} —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–∏–∑—É–∞–ª—å–Ω–æ, –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è).")

    elif cmd == "/ban" and role >= 2 and len(args) > 1:
        target_id = args[1].replace("@id", "")
        reason = " ".join(args[2:]) if len(args) > 2 else "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        bans = load_json("bans.json")
        bans[target_id] = reason
        save_json("bans.json", bans)

        keyboard = {
            "inline": True,
            "buttons": [[
                {
                    "action": {
                        "type": "callback",
                        "label": "üîì –†–∞–∑–±–∞–Ω–∏—Ç—å",
                        "payload": json.dumps({"action": "unban", "target": target_id})
                    }
                },
                {
                    "action": {
                        "type": "callback",
                        "label": "üßπ –û—á–∏—Å—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è",
                        "payload": json.dumps({"action": "clear_user_msgs", "target": target_id})
                    }
                }
            ]]
        }

        send_message(user_id, f"üö´ {target_id} –∑–∞–±–∞–Ω–µ–Ω. –ü—Ä–∏—á–∏–Ω–∞: {reason}", keyboard)

    elif cmd == "/unban" and role >= 2 and len(args) > 1:
        target_id = args[1].replace("@id", "")
        bans = load_json("bans.json")
        if target_id in bans:
            del bans[target_id]
            save_json("bans.json", bans)
            send_message(user_id, f"‚úÖ {target_id} —Ä–∞–∑–±–∞–Ω–µ–Ω.")
        else:
            send_message(user_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –±–∞–Ω–µ.")

    elif cmd == "/setrole" and role >= 2 and len(args) >= 3:
        target_id = args[1].replace("@id", "")
        new_role = int(args[2])
        roles = load_json("roles.json")
        roles[target_id] = new_role
        save_json("roles.json", roles)
        send_message(user_id, f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ {new_role} –¥–ª—è {target_id}.")

    elif cmd == "/roles" and role >= 2:
        roles = load_json("roles.json")
        if roles:
            msg = "\n".join([f"{k}: {v}" for k, v in roles.items()])
            send_message(user_id, msg)
        else:
            send_message(user_id, "–ù–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π.")

    else:
        send_message(user_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

def handle_button(user_id, payload):
    action = payload.get("action")
    target = payload.get("target")
    role = get_role(user_id)

    if action == "unban" and role >= 2:
        bans = load_json("bans.json")
        if target in bans:
            del bans[target]
            save_json("bans.json", bans)
            send_message(user_id, f"‚úÖ {target} —Ä–∞–∑–±–∞–Ω–µ–Ω.")

    elif action == "clear_user_msgs" and role >= 2:
        send_message(user_id, f"üßπ –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target} –≤–∏–∑—É–∞–ª—å–Ω–æ –æ—á–∏—â–µ–Ω—ã (–∑–∞–≥–ª—É—à–∫–∞).")

    else:
        send_message(user_id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∏–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
